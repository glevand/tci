#!/usr/bin/env bash

usage () {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace
	echo "${script_name} - Generate user keys for UEFI secure boot." >&2
	echo "Usage: ${script_name} [flags]" >&2
	echo "Option flags:" >&2
	echo "  -f --force        - Overwrite existing keys." >&2
	echo "  -o --out-dir      - Output directory. Default: '${out_dir}'." >&2
	echo "  -s --cert-subject - Certificate subject. Default: '${cert_subject}'." >&2
	echo "  -h --help         - Show this help and exit." >&2
	echo "  -v --verbose      - Verbose execution." >&2
	echo "  -g --debug        - Extra verbose execution." >&2
	echo "Send bug reports to: Geoff Levand <geoff@infradead.org>." >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="fo:s:hvg"
	local long_opts="force,out-dir:,cert-subject:,help,verbose,debug"

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		#echo "${FUNCNAME[0]}: @${1}@ @${2}@"
		case "${1}" in
		-f | --force)
			force=1
			shift
			;;
		-o | --out-dir)
			out_dir="${2}"
			shift 2
			;;
		-s | --cert-subject)
			cert_subject="${2}"
			shift 2
			;;
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		--)
			shift
			if [[ ${*} ]]; then
				set +o xtrace
				echo "${script_name}: ERROR: Got extra args: '${*}'" >&2
				usage
				exit 1
			fi
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

on_exit() {
	local result=${1}

	set +x
	echo "${script_name}: Done: ${result}" >&2
}

print_cert_der() {
	local cert=${1}

	"${openssl}" x509 -in "${cert}" -inform der -text -noout
}

print_cert_pem() {
	local cert=${1}

	"${openssl}" x509 -in "${cert}" -text -noout
}

generate_user_keys() {
	local key_store="${1}"
	local org="${2}"
	local key_len="${3}"

	local certs_dir="${key_store}/certs"
	local log="${key_store}/user-key.log"

	echo ''
	echo "Generated by ${script_name} (TDD Project) - ${start_time}" | tee --append "${log}"
	echo "https://github.com/glevand/tdd-project" | tee --append "${log}"
	echo '' | tee --append "${log}"

	# pk = platform key.
	# kek = key exchange key.
	# db = whitelist database
	# mok = machine owner key

	local key
	for key in pk kek db mok; do
		local prefix="${key_store}/${key}"

		echo "=============" | tee --append "${log}"
		echo "${key^^} key info:" | tee --append "${log}"
		echo "=============" | tee --append "${log}"
		echo "" | tee --append "${log}"

		"${openssl}" genrsa -out "${prefix}_key.pem" ${key_len} 2>&1 | tee --append "${log}"
		"${openssl}" req -new -x509 -days 365 -sha256 -subj "${org}/CN=${key^^}-KEY" -key "${prefix}_key.pem" -out "${prefix}_cert.pem" 2>&1 | tee --append "${log}"
		"${openssl}" x509 -in "${prefix}_cert.pem" -inform PEM -out "${prefix}_cert.der" -outform DER 2>&1 | tee --append "${log}"
		echo "" | tee --append "${log}"
		print_cert_der "${prefix}_cert.der" | tee --append "${log}"
		echo "" | tee --append "${log}"
	done

	mkdir -p "${certs_dir}"
	cp -a "${key_store}/"*.der "${certs_dir}/"

	echo "keys:" | tee --append "${log}"
	find "${key_store}" -maxdepth 1 -type f -exec "${md5sum}" {} \; 2>&1 | tee --append "${log}"

	echo "" | tee --append "${log}"
	echo "certs:" | tee --append "${log}"
	find "${certs_dir}" -maxdepth 1 -type f -exec "${md5sum}" {} \; 2>&1 | tee --append "${log}"
	echo "" | tee --append "${log}"
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-"?"}):\[\e[0m\] '
script_name="${0##*/}"
base_name="${script_name##*/%}"
base_name="${base_name%.sh}"

SCRIPTS_TOP=${SCRIPTS_TOP:-"$(cd "${BASH_SOURCE%/*}" && pwd)"}

start_time="$(date +%Y.%m.%d-%H.%M.%S)"
SECONDS=0

trap "on_exit 'failed.'" EXIT
set -o pipefail
set -e

source "${SCRIPTS_TOP}/../lib/util.sh"

process_opts "${@}"

out_dir="${out_dir:-"/tmp/${base_name}-${start_time}"}"

cert_subject=${cert_subject:-"/O=TDD Project/OU=TDD Project Secure Boot Keys"}

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

md5sum=${md5sum:-"md5sum"}
openssl=${openssl:-"openssl"}
#sbsign=${sbsign:-"sbsign"}
#sbverify=${sbverify:-"sbverify"}

if ! check_progs " ${md5sum} ${openssl}"; then
	exit 1
fi

if [[ -d "${out_dir}" ]]; then
	if [[ ! ${force} ]]; then
		echo "${script_name}: ERROR: Output directory '${out_dir}' exists.  Will not overwrite." >&2
		usage
		exit 1
	else
		bak_dir="${out_dir}-${start_time}"
		mv "${out_dir}" "${bak_dir}"
		echo "${script_name}: INFO: Old keys saved to '${bak_dir}'." >&2
	fi
fi

mkdir -p "${out_dir}"

generate_user_keys "${out_dir}" "${cert_subject}" "2048"

trap "on_exit 'Success.'" EXIT
exit 0
